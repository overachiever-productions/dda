--------------------------------------------------------------------------------------------------------
BUILD PROTOTYPE SYNTAX: 
> DDABuildPrototype.exe <xxx.build.sql> Maj.Min "description" 
	<xxx.build.sql> = name of the build/.sql file to use. 
	Maj.Min = Major and Min version of the build/version being created. 
	"description" = brief overview of what changes were made/added. 

SAMPLE BUILD COMMAND/EXECUTION:
> DDABuildPrototype.exe current.build.sql 5.x "This is what is in 5.x" 

--------------------------------------------------------------------------------------------------------
BUILD DIRECTIVES HANDLED BY DDABuild(Prototype).exe: 

	--##NOTE: sample comment here...  		
		comment or note - won't be output into the final/projected .sql file. 

	--##OUTPUT: \\Deployment
		specifies a relative path to where the output .sql file will be dropped. 
		where the filename of the output/built-file will be: 
			Maj.Min.Identifier.BuildNumber.sql

	--##INCLUDE: Folder\file_name.sql 
		root relative path to a .sql file to include as part of the output/build. 
		e.g., if we want to include DDA\DDA Performance\list_processes.sql 
			then we'd simply define a directive in the form of: 
				--##INCLUDE: DDA Performance\list_processes.sql 

			NOTE: if the path defined does not exist or match a .sql file the Build Tool will throw an exception.

	--##CONDITIONAL_SUPPORT(xxx) 
		Allows OPTIONAL support (or not) of code/logic. (Unlike ##CONDITIONAL_VERSION() - which enables DIFFERENT versions).
		where xxx is the condition to be satisfied 
		AND, if the engine doesn't MEET said condition (version), then the guts of the sproc will 
			end up being a "Sorry, S4 doesn't support this on version XYZ." result instead of body/logic. 
			
			To Implement: 
				a. PUT the directive ABOVE the CREATE PROC/ETC signature. 
					e.g., 
						--##CONDITIONAL_SUPPORT(> 10.5)

						CREATE PROC dbo.etc... 


				b. Create sproc/UDF/whatever with 'normal' signature and normal capabilities (i.e., for instances > condition). 
				c. Build script will do the 'rest'
					i.e., it'll see that conditional, split the sproc apart, and create a stub-in on lower-version
					instances that throws an error. 
					AND, it'll create an 'alter' that 'updates' the stub to full functionality on instances >= condition.


	--##CONDITIONAL_VERSION(xxx) 
		Allows DIFFERENT versions of the same code - depending upon server/instance version. 

			To Implement: 
				a. create the down/lower-level version of the code as CREATE FUNCTION/SPROC... 
					i.e., this is the function using the OLDER code. 
				b. Add the CONDITIONAL_VERSION() header + an ALTER
					e.g., 

					--##CONDITIONAL_VERSION(>15.0)
					ALTER PROC dda.xyz.... 


				c. the build script will 'do the rest' (i.e., it'll grab the ALTER and turn it into dynamic SQL to be executed IF
					the version is >= condition. 
		

	##{{dda_version}}
		token, which will be replaced by Maj.Min.Id.BuildID whenever the build file is running and processing
		include'd .sql files. 


	##{{dda_version_summary}}
		similar to the above - but contains the "description" passed into the build tool during build.

		
	-- {copyright} 
		token that is replaced with versioned copyright info + repo links. 
		TODO: this should just be ##{{Copyright}} - so that  it matches other 'inline' token syntax (version details). 
			meaning that it would be 'dropped' into .sql files as: 
				-- ##{{Copyright}} and the -- would NOT be replaced, just the token.. 

TODO: 
	- Modify ##CONDITIONAL_SUPPORT(xxx) to enable passing in the RAISERROR message: 
			e.g., ##CONDITIONAL_SUPPORT(> 10.5) [This is the error that will be raised in RAISERROR...]

	-- make {copyright} a better token. 

	-- DDABuildPrototype.exe is a brute-force (proof of concept) tool at present. 
		rewrite using design patterns, and then add to DDA as an additional 'bit' of code... 

	-- Create a PS1 file that asks for a Maj.Min and a description
		and have it be the 'default' build file - i.e., point it at current.build.sql 
			and have it feed in the PS1 'requested' version and description and then report on success/failure.